### YamlMime:JavaType
uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient"
fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient"
name: "LoadTestAdministrationAsyncClient"
nameWithType: "LoadTestAdministrationAsyncClient"
summary: "Initializes a new instance of the asynchronous Load<wbr>Test<wbr>Administration<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **LoadTestAdministrationAsyncClient**"
methods:
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.beginUploadTestFile(java.lang.String,java.lang.String,com.azure.core.util.BinaryData)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.beginUploadTestFile(String testId, String fileName, BinaryData body)"
  name: "beginUploadTestFile(String testId, String fileName, BinaryData body)"
  nameWithType: "LoadTestAdministrationAsyncClient.beginUploadTestFile(String testId, String fileName, BinaryData body)"
  summary: "Uploads file and polls the validation status of the uploaded file."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Unique name for test file with file extension like : App.jmx."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The file content as application/octet-stream."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<TestFileInfo,TestFileInfo> beginUploadTestFile(String testId, String fileName, BinaryData body)"
  desc: "Uploads file and polls the validation status of the uploaded file."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> to poll on and retrieve the file info with validation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.developer.loadtesting.models.TestFileInfo?alt=com.azure.developer.loadtesting.models.TestFileInfo&text=TestFileInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.developer.loadtesting.models.TestFileInfo?alt=com.azure.developer.loadtesting.models.TestFileInfo&text=TestFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.beginUploadTestFile(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.beginUploadTestFile(String testId, String fileName, BinaryData body, RequestOptions fileUploadRequestOptions)"
  name: "beginUploadTestFile(String testId, String fileName, BinaryData body, RequestOptions fileUploadRequestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.beginUploadTestFile(String testId, String fileName, BinaryData body, RequestOptions fileUploadRequestOptions)"
  summary: "Uploads file and polls the validation status of the uploaded file."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Unique name for test file with file extension like : App.jmx."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The file content as application/octet-stream."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the file upload HTTP request before HTTP client sends\n it."
    name: "fileUploadRequestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginUploadTestFile(String testId, String fileName, BinaryData body, RequestOptions fileUploadRequestOptions)"
  desc: "Uploads file and polls the validation status of the uploaded file."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> to poll on and retrieve the file info with validation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateAppComponents(java.lang.String,com.azure.developer.loadtesting.models.TestAppComponents)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateAppComponents(String testId, TestAppComponents body)"
  name: "createOrUpdateAppComponents(String testId, TestAppComponents body)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateAppComponents(String testId, TestAppComponents body)"
  summary: "Add an app component to a test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "App Component model."
    name: "body"
    type: "<xref href=\"com.azure.developer.loadtesting.models.TestAppComponents?alt=com.azure.developer.loadtesting.models.TestAppComponents&text=TestAppComponents\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TestAppComponents> createOrUpdateAppComponents(String testId, TestAppComponents body)"
  desc: "Add an app component to a test. Add an app component to a test by providing the resource Id, name and type."
  returns:
    description: "test app components on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestAppComponents?alt=com.azure.developer.loadtesting.models.TestAppComponents&text=TestAppComponents\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateAppComponentsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateAppComponentsWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateAppComponentsWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateAppComponentsWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  summary: "Add an app component to a test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "App Component model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  desc: "Add an app component to a test. Add an app component to a test by providing the resource Id, name and type.\n\n**Request Body Schema**\n\n```java\n{\n     components (Optional, Required on create): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Optional, Required on create)\n             resourceType: String (Optional, Required on create)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n     testId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     components (Optional, Required on create): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Optional, Required on create)\n             resourceType: String (Optional, Required on create)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n     testId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test app components along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfig(java.lang.String,com.azure.developer.loadtesting.models.TestServerMetricsConfiguration)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfig(String testId, TestServerMetricsConfiguration body)"
  name: "createOrUpdateServerMetricsConfig(String testId, TestServerMetricsConfiguration body)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfig(String testId, TestServerMetricsConfiguration body)"
  summary: "Configure server metrics for a test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Server metric configuration model."
    name: "body"
    type: "<xref href=\"com.azure.developer.loadtesting.models.TestServerMetricsConfiguration?alt=com.azure.developer.loadtesting.models.TestServerMetricsConfiguration&text=TestServerMetricsConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TestServerMetricsConfiguration> createOrUpdateServerMetricsConfig(String testId, TestServerMetricsConfiguration body)"
  desc: "Configure server metrics for a test."
  returns:
    description: "test server metrics configuration on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestServerMetricsConfiguration?alt=com.azure.developer.loadtesting.models.TestServerMetricsConfiguration&text=TestServerMetricsConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfigWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfigWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateServerMetricsConfigWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfigWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  summary: "Configure server metrics for a test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Server metric configuration model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateServerMetricsConfigWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  desc: "Configure server metrics for a test.\n\n**Request Body Schema**\n\n```java\n{\n     testId: String (Optional)\n     metrics (Optional, Required on create): {\n         String (Required): {\n             id: String (Optional)\n             resourceId: String (Optional, Required on create)\n             metricNamespace: String (Optional, Required on create)\n             displayDescription: String (Optional)\n             name: String (Optional, Required on create)\n             aggregation: String (Optional, Required on create)\n             unit: String (Optional)\n             resourceType: String (Optional, Required on create)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     testId: String (Optional)\n     metrics (Optional, Required on create): {\n         String (Required): {\n             id: String (Optional)\n             resourceId: String (Optional, Required on create)\n             metricNamespace: String (Optional, Required on create)\n             displayDescription: String (Optional)\n             name: String (Optional, Required on create)\n             aggregation: String (Optional, Required on create)\n             unit: String (Optional)\n             resourceType: String (Optional, Required on create)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test server metrics configuration along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTest(java.lang.String,com.azure.developer.loadtesting.models.LoadTest)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTest(String testId, LoadTest body)"
  name: "createOrUpdateTest(String testId, LoadTest body)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateTest(String testId, LoadTest body)"
  summary: "Create a new test or update an existing test by providing the test Id."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "body"
    type: "<xref href=\"com.azure.developer.loadtesting.models.LoadTest?alt=com.azure.developer.loadtesting.models.LoadTest&text=LoadTest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LoadTest> createOrUpdateTest(String testId, LoadTest body)"
  desc: "Create a new test or update an existing test by providing the test Id."
  returns:
    description: "load test model on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.LoadTest?alt=com.azure.developer.loadtesting.models.LoadTest&text=LoadTest\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestProfile(java.lang.String,com.azure.developer.loadtesting.models.TestProfile)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestProfile(String testProfileId, TestProfile body)"
  name: "createOrUpdateTestProfile(String testProfileId, TestProfile body)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateTestProfile(String testProfileId, TestProfile body)"
  summary: "Create a new test profile or update an existing test profile."
  parameters:
  - description: "Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testProfileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "body"
    type: "<xref href=\"com.azure.developer.loadtesting.models.TestProfile?alt=com.azure.developer.loadtesting.models.TestProfile&text=TestProfile\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TestProfile> createOrUpdateTestProfile(String testProfileId, TestProfile body)"
  desc: "Create a new test profile or update an existing test profile. Create a new test profile or update an existing test profile by providing the test profile Id."
  returns:
    description: "test Profile Model on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestProfile?alt=com.azure.developer.loadtesting.models.TestProfile&text=TestProfile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestProfileWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body, RequestOptions requestOptions)"
  summary: "Create a new test profile or update an existing test profile."
  parameters:
  - description: "Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testProfileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateTestProfileWithResponse(String testProfileId, BinaryData body, RequestOptions requestOptions)"
  desc: "Create a new test profile or update an existing test profile. Create a new test profile or update an existing test profile by providing the test profile Id.\n\n**Request Body Schema**\n\n```java\n{\n     testProfileId: String (Required)\n     displayName: String (Optional)\n     description: String (Optional)\n     testId: String (Optional)\n     targetResourceId: String (Optional)\n     targetResourceConfigurations (Optional): {\n         kind: String(FunctionsFlexConsumption) (Required)\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     testProfileId: String (Required)\n     displayName: String (Optional)\n     description: String (Optional)\n     testId: String (Optional)\n     targetResourceId: String (Optional)\n     targetResourceConfigurations (Optional): {\n         kind: String(FunctionsFlexConsumption) (Required)\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test Profile Model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  summary: "Create a new test or update an existing test by providing the test Id."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  desc: "Create a new test or update an existing test by providing the test Id.\n\n**Request Body Schema**\n\n```java\n{\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Required): {\n                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n         passFailServerMetrics (Optional): {\n             String (Required): {\n                 resourceId: String (Optional, Required on create)\n                 metricNamespace: String (Optional, Required on create)\n                 metricName: String (Optional, Required on create)\n                 aggregation: String (Optional, Required on create)\n                 condition: String (Optional, Required on create)\n                 value: double (Optional, Required on create)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n     }\n     autoStopCriteria (Optional): {\n         autoStopDisabled: Boolean (Optional)\n         errorRate: Double (Optional)\n         errorRateTimeWindowInSeconds: Long (Optional)\n     }\n     secrets (Optional): {\n         String (Required): {\n             value: String (Optional)\n             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n         }\n     }\n     certificate (Optional): {\n         value: String (Optional)\n         type: String(AKV_CERT_URI) (Optional)\n         name: String (Optional)\n     }\n     environmentVariables (Optional): {\n         String: String (Required)\n     }\n     loadTestConfiguration (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n         quickStartTest: Boolean (Optional)\n         optionalLoadTestConfig (Optional): {\n             endpointUrl: String (Optional)\n             requestsPerSecond: Integer (Optional)\n             maxResponseTimeInMs: Integer (Optional)\n             virtualUsers: Integer (Optional)\n             rampUpTime: Integer (Optional)\n             duration: Long (Optional)\n         }\n         regionalLoadTestConfig (Optional): [\n              (Optional){\n                 engineInstances: int (Optional, Required on create)\n                 region: String (Optional, Required on create)\n             }\n         ]\n     }\n     baselineTestRunId: String (Optional)\n     inputArtifacts (Optional): {\n         configFileInfo (Optional): {\n             fileName: String (Required)\n             url: String (Optional)\n             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)\n             expireDateTime: OffsetDateTime (Optional)\n             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n             validationFailureDetails: String (Optional)\n         }\n         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)\n         additionalFileInfo (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     testId: String (Required)\n     description: String (Optional)\n     displayName: String (Optional)\n     subnetId: String (Optional)\n     kind: String(URL/JMX/Locust) (Optional)\n     publicIPDisabled: Boolean (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     metricsReferenceIdentityId: String (Optional)\n     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     engineBuiltInIdentityIds (Optional): [\n         String (Optional)\n     ]\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Required): {\n                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n         passFailServerMetrics (Optional): {\n             String (Required): {\n                 resourceId: String (Optional, Required on create)\n                 metricNamespace: String (Optional, Required on create)\n                 metricName: String (Optional, Required on create)\n                 aggregation: String (Optional, Required on create)\n                 condition: String (Optional, Required on create)\n                 value: double (Optional, Required on create)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n     }\n     autoStopCriteria (Optional): {\n         autoStopDisabled: Boolean (Optional)\n         errorRate: Double (Optional)\n         errorRateTimeWindowInSeconds: Long (Optional)\n     }\n     secrets (Optional): {\n         String (Required): {\n             value: String (Optional)\n             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n         }\n     }\n     certificate (Optional): {\n         value: String (Optional)\n         type: String(AKV_CERT_URI) (Optional)\n         name: String (Optional)\n     }\n     environmentVariables (Optional): {\n         String: String (Required)\n     }\n     loadTestConfiguration (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n         quickStartTest: Boolean (Optional)\n         optionalLoadTestConfig (Optional): {\n             endpointUrl: String (Optional)\n             requestsPerSecond: Integer (Optional)\n             maxResponseTimeInMs: Integer (Optional)\n             virtualUsers: Integer (Optional)\n             rampUpTime: Integer (Optional)\n             duration: Long (Optional)\n         }\n         regionalLoadTestConfig (Optional): [\n              (Optional){\n                 engineInstances: int (Optional, Required on create)\n                 region: String (Optional, Required on create)\n             }\n         ]\n     }\n     baselineTestRunId: String (Optional)\n     inputArtifacts (Optional): {\n         configFileInfo (Optional): {\n             fileName: String (Required)\n             url: String (Optional)\n             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)\n             expireDateTime: OffsetDateTime (Optional)\n             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n             validationFailureDetails: String (Optional)\n         }\n         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)\n         additionalFileInfo (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     testId: String (Required)\n     description: String (Optional)\n     displayName: String (Optional)\n     subnetId: String (Optional)\n     kind: String(URL/JMX/Locust) (Optional)\n     publicIPDisabled: Boolean (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     metricsReferenceIdentityId: String (Optional)\n     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     engineBuiltInIdentityIds (Optional): [\n         String (Optional)\n     ]\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "load test model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTest(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTest(String testId)"
  name: "deleteTest(String testId)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTest(String testId)"
  summary: "Delete a test by its test Id."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteTest(String testId)"
  desc: "Delete a test by its test Id."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestFile(java.lang.String,java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestFile(String testId, String fileName)"
  name: "deleteTestFile(String testId, String fileName)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTestFile(String testId, String fileName)"
  summary: "Delete file by the file name for a test."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Name of the file."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteTestFile(String testId, String fileName)"
  desc: "Delete file by the file name for a test."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  name: "deleteTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  summary: "Delete file by the file name for a test."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Name of the file."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  desc: "Delete file by the file name for a test."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestProfile(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestProfile(String testProfileId)"
  name: "deleteTestProfile(String testProfileId)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTestProfile(String testProfileId)"
  summary: "Delete a test profile."
  parameters:
  - description: "Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testProfileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteTestProfile(String testProfileId)"
  desc: "Delete a test profile. Delete a test profile by its test profile Id."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestProfileWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  name: "deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  summary: "Delete a test profile."
  parameters:
  - description: "Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testProfileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  desc: "Delete a test profile. Delete a test profile by its test profile Id."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestWithResponse(String testId, RequestOptions requestOptions)"
  name: "deleteTestWithResponse(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTestWithResponse(String testId, RequestOptions requestOptions)"
  summary: "Delete a test by its test Id."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTestWithResponse(String testId, RequestOptions requestOptions)"
  desc: "Delete a test by its test Id."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponents(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponents(String testId)"
  name: "getAppComponents(String testId)"
  nameWithType: "LoadTestAdministrationAsyncClient.getAppComponents(String testId)"
  summary: "Get associated app component (collection of azure resources) for the given test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<TestAppComponents> getAppComponents(String testId)"
  desc: "Get associated app component (collection of azure resources) for the given test."
  returns:
    description: "associated app component (collection of azure resources) for the given test on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestAppComponents?alt=com.azure.developer.loadtesting.models.TestAppComponents&text=TestAppComponents\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponentsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponentsWithResponse(String testId, RequestOptions requestOptions)"
  name: "getAppComponentsWithResponse(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getAppComponentsWithResponse(String testId, RequestOptions requestOptions)"
  summary: "Get associated app component (collection of azure resources) for the given test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getAppComponentsWithResponse(String testId, RequestOptions requestOptions)"
  desc: "Get associated app component (collection of azure resources) for the given test.\n\n**Response Body Schema**\n\n```java\n{\n     components (Optional, Required on create): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Optional, Required on create)\n             resourceType: String (Optional, Required on create)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n     testId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "associated app component (collection of azure resources) for the given test along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>\n on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsConfig(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsConfig(String testId)"
  name: "getServerMetricsConfig(String testId)"
  nameWithType: "LoadTestAdministrationAsyncClient.getServerMetricsConfig(String testId)"
  summary: "List server metrics configuration for the given test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<TestServerMetricsConfiguration> getServerMetricsConfig(String testId)"
  desc: "List server metrics configuration for the given test."
  returns:
    description: "test server metrics configuration on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestServerMetricsConfiguration?alt=com.azure.developer.loadtesting.models.TestServerMetricsConfiguration&text=TestServerMetricsConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsConfigWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsConfigWithResponse(String testId, RequestOptions requestOptions)"
  name: "getServerMetricsConfigWithResponse(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getServerMetricsConfigWithResponse(String testId, RequestOptions requestOptions)"
  summary: "List server metrics configuration for the given test."
  parameters:
  - description: "Unique name for the load test, must contain only lower-case alphabetic,\n numeric, underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getServerMetricsConfigWithResponse(String testId, RequestOptions requestOptions)"
  desc: "List server metrics configuration for the given test.\n\n**Response Body Schema**\n\n```java\n{\n     testId: String (Optional)\n     metrics (Optional, Required on create): {\n         String (Required): {\n             id: String (Optional)\n             resourceId: String (Optional, Required on create)\n             metricNamespace: String (Optional, Required on create)\n             displayDescription: String (Optional)\n             name: String (Optional, Required on create)\n             aggregation: String (Optional, Required on create)\n             unit: String (Optional)\n             resourceType: String (Optional, Required on create)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test server metrics configuration along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTest(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTest(String testId)"
  name: "getTest(String testId)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTest(String testId)"
  summary: "Get load test details by test Id."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<LoadTest> getTest(String testId)"
  desc: "Get load test details by test Id."
  returns:
    description: "load test details by test Id on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.LoadTest?alt=com.azure.developer.loadtesting.models.LoadTest&text=LoadTest\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestFile(java.lang.String,java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestFile(String testId, String fileName)"
  name: "getTestFile(String testId, String fileName)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTestFile(String testId, String fileName)"
  summary: "Get all the files that are associated with a test."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Name of the file."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<TestFileInfo> getTestFile(String testId, String fileName)"
  desc: "Get all the files that are associated with a test."
  returns:
    description: "all the files that are associated with a test on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestFileInfo?alt=com.azure.developer.loadtesting.models.TestFileInfo&text=TestFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  name: "getTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  summary: "Get all the files that are associated with a test."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Name of the file."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTestFileWithResponse(String testId, String fileName, RequestOptions requestOptions)"
  desc: "Get all the files that are associated with a test.\n\n**Response Body Schema**\n\n```java\n{\n     fileName: String (Required)\n     url: String (Optional)\n     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)\n     expireDateTime: OffsetDateTime (Optional)\n     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n     validationFailureDetails: String (Optional)\n }\n```"
  returns:
    description: "all the files that are associated with a test along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestProfile(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestProfile(String testProfileId)"
  name: "getTestProfile(String testProfileId)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTestProfile(String testProfileId)"
  summary: "Get load test profile details."
  parameters:
  - description: "Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testProfileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<TestProfile> getTestProfile(String testProfileId)"
  desc: "Get load test profile details. Get load test profile details by test profile Id."
  returns:
    description: "load test profile details.\n\n Get load test profile details by test profile Id on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.developer.loadtesting.models.TestProfile?alt=com.azure.developer.loadtesting.models.TestProfile&text=TestProfile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestProfileWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  name: "getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  summary: "Get load test profile details."
  parameters:
  - description: "Unique identifier for the test profile, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testProfileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTestProfileWithResponse(String testProfileId, RequestOptions requestOptions)"
  desc: "Get load test profile details. Get load test profile details by test profile Id.\n\n**Response Body Schema**\n\n```java\n{\n     testProfileId: String (Required)\n     displayName: String (Optional)\n     description: String (Optional)\n     testId: String (Optional)\n     targetResourceId: String (Optional)\n     targetResourceConfigurations (Optional): {\n         kind: String(FunctionsFlexConsumption) (Required)\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "load test profile details.\n\n Get load test profile details by test profile Id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestWithResponse(String testId, RequestOptions requestOptions)"
  name: "getTestWithResponse(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTestWithResponse(String testId, RequestOptions requestOptions)"
  summary: "Get load test details by test Id."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTestWithResponse(String testId, RequestOptions requestOptions)"
  desc: "Get load test details by test Id.\n\n**Response Body Schema**\n\n```java\n{\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Required): {\n                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n         passFailServerMetrics (Optional): {\n             String (Required): {\n                 resourceId: String (Optional, Required on create)\n                 metricNamespace: String (Optional, Required on create)\n                 metricName: String (Optional, Required on create)\n                 aggregation: String (Optional, Required on create)\n                 condition: String (Optional, Required on create)\n                 value: double (Optional, Required on create)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n     }\n     autoStopCriteria (Optional): {\n         autoStopDisabled: Boolean (Optional)\n         errorRate: Double (Optional)\n         errorRateTimeWindowInSeconds: Long (Optional)\n     }\n     secrets (Optional): {\n         String (Required): {\n             value: String (Optional)\n             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n         }\n     }\n     certificate (Optional): {\n         value: String (Optional)\n         type: String(AKV_CERT_URI) (Optional)\n         name: String (Optional)\n     }\n     environmentVariables (Optional): {\n         String: String (Required)\n     }\n     loadTestConfiguration (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n         quickStartTest: Boolean (Optional)\n         optionalLoadTestConfig (Optional): {\n             endpointUrl: String (Optional)\n             requestsPerSecond: Integer (Optional)\n             maxResponseTimeInMs: Integer (Optional)\n             virtualUsers: Integer (Optional)\n             rampUpTime: Integer (Optional)\n             duration: Long (Optional)\n         }\n         regionalLoadTestConfig (Optional): [\n              (Optional){\n                 engineInstances: int (Optional, Required on create)\n                 region: String (Optional, Required on create)\n             }\n         ]\n     }\n     baselineTestRunId: String (Optional)\n     inputArtifacts (Optional): {\n         configFileInfo (Optional): {\n             fileName: String (Required)\n             url: String (Optional)\n             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)\n             expireDateTime: OffsetDateTime (Optional)\n             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n             validationFailureDetails: String (Optional)\n         }\n         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)\n         additionalFileInfo (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     testId: String (Required)\n     description: String (Optional)\n     displayName: String (Optional)\n     subnetId: String (Optional)\n     kind: String(URL/JMX/Locust) (Optional)\n     publicIPDisabled: Boolean (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     metricsReferenceIdentityId: String (Optional)\n     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     engineBuiltInIdentityIds (Optional): [\n         String (Optional)\n     ]\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "load test details by test Id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestFiles(java.lang.String)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestFiles(String testId)"
  name: "listTestFiles(String testId)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTestFiles(String testId)"
  summary: "Get all test files."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<TestFileInfo> listTestFiles(String testId)"
  desc: "Get all test files."
  returns:
    description: "all test files as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.developer.loadtesting.models.TestFileInfo?alt=com.azure.developer.loadtesting.models.TestFileInfo&text=TestFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestFiles(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestFiles(String testId, RequestOptions requestOptions)"
  name: "listTestFiles(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTestFiles(String testId, RequestOptions requestOptions)"
  summary: "Get all test files."
  parameters:
  - description: "Unique test identifier for the load test, must contain only lower-case alphabetic, numeric,\n underscore or hyphen characters."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTestFiles(String testId, RequestOptions requestOptions)"
  desc: "Get all test files.\n\n**Response Body Schema**\n\n```java\n{\n     fileName: String (Required)\n     url: String (Optional)\n     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)\n     expireDateTime: OffsetDateTime (Optional)\n     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n     validationFailureDetails: String (Optional)\n }\n```"
  returns:
    description: "all test files as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestProfiles()"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestProfiles()"
  name: "listTestProfiles()"
  nameWithType: "LoadTestAdministrationAsyncClient.listTestProfiles()"
  summary: "List test profiles."
  syntax: "public PagedFlux<TestProfile> listTestProfiles()"
  desc: "List test profiles. Get all test profiles for the given filters."
  returns:
    description: "paged collection of TestProfile items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.developer.loadtesting.models.TestProfile?alt=com.azure.developer.loadtesting.models.TestProfile&text=TestProfile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestProfiles(java.time.OffsetDateTime,java.time.OffsetDateTime,java.util.List<java.lang.String>,java.util.List<java.lang.String>)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestProfiles(OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime, List<String> testProfileIds, List<String> testIds)"
  name: "listTestProfiles(OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime, List<String> testProfileIds, List<String> testIds)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTestProfiles(OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime, List<String> testProfileIds, List<String> testIds)"
  summary: "List test profiles."
  parameters:
  - description: "Start DateTime(RFC 3339 literal format) of the last updated time range to filter\n test profiles."
    name: "lastModifiedStartTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
  - description: "End DateTime(RFC 3339 literal format) of the last updated time range to filter test\n profiles."
    name: "lastModifiedEndTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
  - description: "Comma separated list of IDs of the test profiles to filter."
    name: "testProfileIds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  - description: "Comma separated list IDs of the tests which should be associated with the test profiles to fetch."
    name: "testIds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public PagedFlux<TestProfile> listTestProfiles(OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime, List<String> testProfileIds, List<String> testIds)"
  desc: "List test profiles. Get all test profiles for the given filters."
  returns:
    description: "paged collection of TestProfile items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.developer.loadtesting.models.TestProfile?alt=com.azure.developer.loadtesting.models.TestProfile&text=TestProfile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestProfiles(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestProfiles(RequestOptions requestOptions)"
  name: "listTestProfiles(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTestProfiles(RequestOptions requestOptions)"
  summary: "List test profiles."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTestProfiles(RequestOptions requestOptions)"
  desc: "List test profiles. Get all test profiles for the given filters.\n\n**Query Parameters**\n\n    | --------------------- | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                  | Type           | Required | Description                                                                                                                            |\n    | maxpagesize           | Integer        | No       | Maximum number of results to include in a single response.                                                                             |\n    | lastModifiedStartTime | OffsetDateTime | No       | Start DateTime(RFC 3339 literal format) of the last updated time range to filter test profiles.                                        |\n    | lastModifiedEndTime   | OffsetDateTime | No       | End DateTime(RFC 3339 literal format) of the last updated time range to filter test profiles.                                          |\n    | testProfileIds        | List<String>   | No       | Comma separated list of IDs of the test profiles to filter. In the form of \",\" separated string.                                       |\n    | testIds               | List<String>   | No       | Comma separated list IDs of the tests which should be associated with the test profiles to fetch. In the form of \",\" separated string. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     testProfileId: String (Required)\n     displayName: String (Optional)\n     description: String (Optional)\n     testId: String (Optional)\n     targetResourceId: String (Optional)\n     targetResourceConfigurations (Optional): {\n         kind: String(FunctionsFlexConsumption) (Required)\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "paged collection of TestProfile items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTests()"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTests()"
  name: "listTests()"
  nameWithType: "LoadTestAdministrationAsyncClient.listTests()"
  summary: "Get all load tests by the fully qualified resource Id e.<wbr>g subscriptions/\\{sub<wbr>Id\\}/resource<wbr>Groups/\\{rg\\}/providers/Microsoft.<wbr>Load<wbr>Test<wbr>Service/loadtests/\\{res<wbr>Name\\}."
  syntax: "public PagedFlux<LoadTest> listTests()"
  desc: "Get all load tests by the fully qualified resource Id e.g subscriptions/\\{subId\\}/resourceGroups/\\{rg\\}/providers/Microsoft.LoadTestService/loadtests/\\{resName\\}."
  returns:
    description: "all load tests by the fully qualified resource Id e.g\n subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated\n response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.developer.loadtesting.models.LoadTest?alt=com.azure.developer.loadtesting.models.LoadTest&text=LoadTest\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTests(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTests(RequestOptions requestOptions)"
  name: "listTests(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTests(RequestOptions requestOptions)"
  summary: "Get all load tests by the fully qualified resource Id e.<wbr>g subscriptions/\\{sub<wbr>Id\\}/resource<wbr>Groups/\\{rg\\}/providers/Microsoft.<wbr>Load<wbr>Test<wbr>Service/loadtests/\\{res<wbr>Name\\}."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTests(RequestOptions requestOptions)"
  desc: "Get all load tests by the fully qualified resource Id e.g subscriptions/\\{subId\\}/resourceGroups/\\{rg\\}/providers/Microsoft.LoadTestService/loadtests/\\{resName\\}.\n\n**Query Parameters**\n\n    | --------------------- | -------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                  | Type           | Required | Description                                                                                                                                                                               |\n    | orderby               | String         | No       | Sort on the supported fields in (field asc/desc) format. eg: lastModifiedDateTime asc. Supported fields - lastModifiedDateTime                                                            |\n    | search                | String         | No       | Prefix based, case sensitive search on searchable fields - displayName, createdBy. For example, to search for a test, with display name is Login Test, the search parameter can be Login. |\n    | lastModifiedStartTime | OffsetDateTime | No       | Start DateTime(RFC 3339 literal format) of the last updated time range to filter tests.                                                                                                   |\n    | lastModifiedEndTime   | OffsetDateTime | No       | End DateTime(RFC 3339 literal format) of the last updated time range to filter tests.                                                                                                     |\n    | maxpagesize           | Integer        | No       | Number of results in response.                                                                                                                                                            |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Required): {\n                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                 aggregate: String(count/percentage/avg/p50/p75/p90/p95/p96/p97/p98/p99/p99.9/p99.99/min/max) (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n         passFailServerMetrics (Optional): {\n             String (Required): {\n                 resourceId: String (Optional, Required on create)\n                 metricNamespace: String (Optional, Required on create)\n                 metricName: String (Optional, Required on create)\n                 aggregation: String (Optional, Required on create)\n                 condition: String (Optional, Required on create)\n                 value: double (Optional, Required on create)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n     }\n     autoStopCriteria (Optional): {\n         autoStopDisabled: Boolean (Optional)\n         errorRate: Double (Optional)\n         errorRateTimeWindowInSeconds: Long (Optional)\n     }\n     secrets (Optional): {\n         String (Required): {\n             value: String (Optional)\n             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n         }\n     }\n     certificate (Optional): {\n         value: String (Optional)\n         type: String(AKV_CERT_URI) (Optional)\n         name: String (Optional)\n     }\n     environmentVariables (Optional): {\n         String: String (Required)\n     }\n     loadTestConfiguration (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n         quickStartTest: Boolean (Optional)\n         optionalLoadTestConfig (Optional): {\n             endpointUrl: String (Optional)\n             requestsPerSecond: Integer (Optional)\n             maxResponseTimeInMs: Integer (Optional)\n             virtualUsers: Integer (Optional)\n             rampUpTime: Integer (Optional)\n             duration: Long (Optional)\n         }\n         regionalLoadTestConfig (Optional): [\n              (Optional){\n                 engineInstances: int (Optional, Required on create)\n                 region: String (Optional, Required on create)\n             }\n         ]\n     }\n     baselineTestRunId: String (Optional)\n     inputArtifacts (Optional): {\n         configFileInfo (Optional): {\n             fileName: String (Required)\n             url: String (Optional)\n             fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS/ZIPPED_ARTIFACTS/URL_TEST_CONFIG/TEST_SCRIPT) (Optional)\n             expireDateTime: OffsetDateTime (Optional)\n             validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n             validationFailureDetails: String (Optional)\n         }\n         testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n         userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n         inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n         urlTestConfigFileInfo (Optional): (recursive schema, see urlTestConfigFileInfo above)\n         additionalFileInfo (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     testId: String (Required)\n     description: String (Optional)\n     displayName: String (Optional)\n     subnetId: String (Optional)\n     kind: String(URL/JMX/Locust) (Optional)\n     publicIPDisabled: Boolean (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n     metricsReferenceIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     metricsReferenceIdentityId: String (Optional)\n     engineBuiltInIdentityType: String(SystemAssigned/UserAssigned) (Optional)\n     engineBuiltInIdentityIds (Optional): [\n         String (Optional)\n     ]\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "all load tests by the fully qualified resource Id e.g\n subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated\n response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTests(java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTests(String orderBy, String search, OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime)"
  name: "listTests(String orderBy, String search, OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTests(String orderBy, String search, OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime)"
  summary: "Get all load tests by the fully qualified resource Id e.<wbr>g subscriptions/\\{sub<wbr>Id\\}/resource<wbr>Groups/\\{rg\\}/providers/Microsoft.<wbr>Load<wbr>Test<wbr>Service/loadtests/\\{res<wbr>Name\\}."
  parameters:
  - description: "Sort on the supported fields in (field asc/desc) format. eg:\n lastModifiedDateTime asc. Supported fields - lastModifiedDateTime."
    name: "orderBy"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Prefix based, case sensitive search on searchable fields - displayName,\n createdBy. For example, to search for a test, with display name is Login Test,\n the search parameter can be Login."
    name: "search"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Start DateTime(RFC 3339 literal format) of the last updated time range to filter\n tests."
    name: "lastModifiedStartTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
  - description: "End DateTime(RFC 3339 literal format) of the last updated time range to filter tests."
    name: "lastModifiedEndTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
  syntax: "public PagedFlux<LoadTest> listTests(String orderBy, String search, OffsetDateTime lastModifiedStartTime, OffsetDateTime lastModifiedEndTime)"
  desc: "Get all load tests by the fully qualified resource Id e.g subscriptions/\\{subId\\}/resourceGroups/\\{rg\\}/providers/Microsoft.LoadTestService/loadtests/\\{resName\\}."
  returns:
    description: "all load tests by the fully qualified resource Id e.g\n subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as paginated\n response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.developer.loadtesting.models.LoadTest?alt=com.azure.developer.loadtesting.models.LoadTest&text=LoadTest\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous LoadTestAdministrationClient type."
metadata: {}
package: "com.azure.developer.loadtesting"
artifact: com.azure:azure-developer-loadtesting:1.1.0-beta.1
